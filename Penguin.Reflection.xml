<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Penguin.Reflection</name>
    </assembly>
    <members>
        <member name="T:Penguin.Reflection.Cache">
            <summary>
            A static cache designed to help speed up attribute retrieval
            </summary>
        </member>
        <member name="M:Penguin.Reflection.Cache.GetAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            Gets the first attribute matching the specified type
            </summary>
            <typeparam name="T">The attribute type</typeparam>
            <param name="p">The member source</param>
            <returns>The first attribute matching the specified type</returns>
        </member>
        <member name="M:Penguin.Reflection.Cache.GetCustomAttributes(System.Reflection.MemberInfo)">
            <summary>
            Gets all attribute instances from the current member
            </summary>
            <param name="p">The member source</param>
            <returns>All attribute instances from the current member</returns>
        </member>
        <member name="M:Penguin.Reflection.Cache.GetProperties(System.Type)">
            <summary>
            Gets all the properties of the current type
            </summary>
            <param name="t">The type to search</param>
            <returns>All of the properties. All of them</returns>
        </member>
        <member name="M:Penguin.Reflection.Cache.HasAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            Checks to see if the given member contains an attribute of a specified type
            </summary>
            <typeparam name="T">The type to check for</typeparam>
            <param name="p">The member to check</param>
            <returns>Does the member declare this attribute?</returns>
        </member>
        <member name="M:Penguin.Reflection.Cache.HasAttribute(System.Reflection.MemberInfo,System.Type)">
            <summary>
            Checks to see if the given member contains an attribute of a specified type
            </summary>
            <param name="p">The member to check</param>
            <param name="t">The type to check for</param>
            <returns>Does the member declare this attribute?</returns>
        </member>
        <member name="M:Penguin.Reflection.ReflectiveEnumerator.GetEnumerableOfType``1">
            <summary>
            Gets all subtypes (inc specified) in current executing assembly
            </summary>
            <typeparam name="T">The root type to check for</typeparam>
            <returns>All the subtypes.</returns>
        </member>
        <member name="M:Penguin.Reflection.ReflectiveEnumerator.GetInstancesOfType``1(System.Object[])">
            <summary>
            For the specified type, returns a list of new instances of every type or subtype
            </summary>
            <typeparam name="T">The root type to check for</typeparam>
            <param name="constructorArgs">Any applicable constuctor arguments</param>
            <returns>A list of new instances of every type or subtype</returns>
        </member>
        <member name="M:Penguin.Reflection.ReflectiveEnumerator.GetTypesThatImplementInterface``1">
            <summary>
            Gets all types from the executing assembly that implement an interface
            </summary>
            <typeparam name="T">The interface to check for</typeparam>
            <returns>All the types</returns>
        </member>
        <member name="T:Penguin.Reflection.TypeFactory">
            <summary>
            A static class used to perform all kinds of type based reflections over a whitelist of assemblies for finding and resolving many kinds of queries
            </summary>
        </member>
        <member name="P:Penguin.Reflection.TypeFactory.Log">
            <summary>
            Provides a log for debugging type loading
            </summary>
        </member>
        <member name="M:Penguin.Reflection.TypeFactory.#cctor">
            <summary>
            Since everything is cached, we need to make sure ALL potential assemblies are loaded or we might end up missing classes because
            the assembly hasn't been loaded yet. Consider only loading whitelisted references if this is slow
            </summary>
        </member>
        <member name="M:Penguin.Reflection.TypeFactory.GetAllImplementations``1">
            <summary>
            Gets all types in whitelisted assemblies that implement a given interface
            </summary>
            <typeparam name="T">The interface to check for</typeparam>
            <returns>All of the aforementioned types</returns>
        </member>
        <member name="M:Penguin.Reflection.TypeFactory.GetAllImplementations(System.Type)">
            <summary>
            Gets all types in whitelisted assemblies that implement a given interface
            </summary>
            <param name="InterfaceType">The interface to check for</param>
            <returns>All of the aforementioned types</returns>
        </member>
        <member name="M:Penguin.Reflection.TypeFactory.GetAllTypes">
            <summary>
            Gets all types from all whitelisted assemblies
            </summary>
            <returns></returns>
        </member>
        <member name="M:Penguin.Reflection.TypeFactory.GetAssemblyTypes(System.Reflection.Assembly)">
            <summary>
            Gets all types in the specified assembly (where not compiler generated)
            </summary>
            <param name="a">The assembly to check</param>
            <returns>All the types in the assembly</returns>
        </member>
        <member name="M:Penguin.Reflection.TypeFactory.GetDerivedTypes(System.Type)">
            <summary>
            Gets a list of all types derived from the current type
            </summary>
            <param name="t">The root type to check for</param>
            <returns>All of the derived types</returns>
        </member>
        <member name="M:Penguin.Reflection.TypeFactory.GetMostDerivedType(System.Type)">
            <summary>
            Gets the most derived type of the specified type. For use when inheritence is used to determine
            the proper type to return
            </summary>
            <param name="t">The base type to check for (Ex DbContext)</param>
            <returns>The most derived type, or error if branching tree</returns>
        </member>
        <member name="M:Penguin.Reflection.TypeFactory.GetMostDerivedType(System.Collections.Generic.List{System.Type},System.Type)">
            <summary>
            Gets the most derived type matching the base type, from a custom list of types
            </summary>
            <param name="types">The list of types to check</param>
            <param name="t">The base type to check for</param>
            <returns>The most derived type out of the list</returns>
        </member>
        <member name="M:Penguin.Reflection.TypeFactory.GetProperties(System.Type)">
            <summary>
            Gets the properties of the type
            </summary>
            <param name="t">The type to get the properies of</param>
            <returns>All of the properties. All of them.</returns>
        </member>
        <member name="M:Penguin.Reflection.TypeFactory.GetProperties(System.Object)">
            <summary>
            Gets all the properties of the object
            </summary>
            <param name="o">The object to get the properties of</param>
            <returns>All of the properties. All of them.</returns>
        </member>
        <member name="M:Penguin.Reflection.TypeFactory.GetType(System.Object)">
            <summary>
            Gets the type of the object. Currently strips off EntityProxy type to expose the underlying type.
            Should be altered to use a func system for custom resolutions
            </summary>
            <param name="o">The object to get the type of </param>
            <returns>The objects type</returns>
        </member>
        <member name="M:Penguin.Reflection.TypeFactory.GetTypeByFullName(System.String,System.Type,System.Boolean,System.String)">
            <summary>
            Searches all whitelisted assemblies to find a type with the given full name
            </summary>
            <param name="name">The full name to check for</param>
            <param name="BaseType">An optional base type requirement</param>
            <param name="includeDerived">Whether or not to include types that inherit from the specified name type</param>
            <param name="targetNamespace">An optional restriction on the namespace of the search</param>
            <returns>A type matching the full name, or derived type</returns>
        </member>
        <member name="M:Penguin.Reflection.TypeFactory.HasAttribute(System.Reflection.MemberInfo,System.Type)">
            <summary>
            Checks if the specified type declares a given attribute
            </summary>
            <param name="toCheck">The type to check</param>
            <param name="attribute">the attribute type to check for</param>
            <returns>Whether or not the attribute is declared on the type</returns>
        </member>
        <member name="M:Penguin.Reflection.TypeFactory.HasAttribute(System.Object,System.Type)">
            <summary>
            Checks if an object has an attribute declared on its type
            </summary>
            <param name="o">The object to check</param>
            <param name="attribute">The attribute to check for</param>
            <returns>Whether or not the attribute is declared on the object type</returns>
        </member>
        <member name="M:Penguin.Reflection.TypeFactory.RetrieveAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            Retrieves the first matching attribute of the specified type
            </summary>
            <typeparam name="T">The base type to find</typeparam>
            <param name="toCheck">The member to check</param>
            <returns>The first matching attribute</returns>
        </member>
        <member name="M:Penguin.Reflection.TypeFactory.RetrieveAttributes``1(System.Reflection.MemberInfo)">
            <summary>
            Gets a list of all custom attributes on the member
            </summary>
            <typeparam name="T">The base type of the attributes to get</typeparam>
            <param name="toCheck">The member to retrieve the information for</param>
            <returns>all custom attributes</returns>
        </member>
    </members>
</doc>
